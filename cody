#!/usr/bin/ruby
require 'fileutils'

#Cody preference
module Cody
    @@version   = "0.0.8"
    @@root_path = Dir.pwd
end

begin
    require 'cody-erb'
rescue Exception => e
    Dir.glob("**/cody-erb.rb") do |f|
        require_relative f
    end
end

cody_deploy_except = ["cody", "Gemfile", "Gemfile.lock", "Guardfile"]

if ARGV.length == 0
    #load cody-erb
    
    require 'listen'
    
    listener = Listen.to(Cody::root_path, {only: /\.erb$/}) do |modified, added, removed|
        
        modified.each do |p|
            #break temp file
            next if p.match /\/\_.+.erb$/
                
            #cloud9(c9.io) meta escape
            source_path = p.gsub(/\.c9\/metadata\/workspace\//, '')
            
            #cody-erb execute
            begin
                write_path = "#{File.split(source_path)[0]}/#{File.basename(source_path).gsub(/\.erb$/,'.html')}" 
                
                File.open(write_path, 'w') do |f|
                    erbstruct = Cody::ERBStruct.new(source_path)
                    result    = erbstruct.erb_result
                    f.write result
                end
                puts "[OK]Compiling ERB #{source_path} to #{ write_path }"
            rescue Exception => e
                puts "[Opps]Compiling ERB #{source_path} failed: #{e}"
            end
        end if modified
        
    end
    listener.start
    
    puts "cody#{Cody::version} listen start\nCtrl+c is escape"
    sleep
else
    case ARGV[0]
    when /^(init|i)$/
        puts 'cody init... gem listen (0/3)'
        `gem install listen`
        puts 'cody init... gem activesupport (1/3)'
        `gem install activesupport`
        puts 'cody init... gem json (2/3)'
        `gem install json`
        puts 'cody init complete (3/3)'
    when /^(deploy|d)$/
        #deploy path ready
        root_path   = File.split(__FILE__)[0]
        deploy_name = ARGV[1] ? ARGV[1] : "converted-html"
        deploy_path = File.expand_path deploy_name, root_path
        
        #deploy path clear
        FileUtils.rm_rf deploy_path if File.exist?(deploy_path)
        FileUtils.mkdir deploy_path
        
        #add deploy_except
        cody_deploy_except << deploy_name
        Dir.glob('*').each do |filename|
            #no copy cody file
            next if cody_deploy_except.include? filename
            
            #copy soruce
            FileUtils.cp_r File.expand_path(filename, root_path), File.expand_path(filename, deploy_path)
        end
        
        #clear source files
        Dir.glob("#{deploy_path}/**/\_*") do |f|
            FileUtils.rm_rf f if File.directory? f
        end
        Dir.glob("#{deploy_path}/**/*.erb") do |f|
            FileUtils.rm f
        end
        Dir.glob("#{deploy_path}/**/*.scss") do |f|
            FileUtils.rm f
        end
    else
        puts "unknown commend #{ARGV[0]}"
    end
end